날짜가 가장중요

파이썬 

컴파일러와 인터프리터
컴파일러, 번역기 , 
인터프리터, 라인 바이라인, 대화?
기계는 이진수로된기계어로 수행이된다. 번역을하는것이 컴파일러
인터프리터는 통역사라고 보면될까? 
컴파일러는 사람이 쓴글을 기계가 알아듣는글로 통쨰로 번역하고주면 기계가 통째로 수행시킨다
인터프리터는 기계어와 거리가 멀다. 계산기프로그램을짤때 숫자를 넣고, 기호를 누르면 계산이 된다.

인터프리터는 프로그램을 짜는것이고. 인터프리터가 수행되는동안 우리가 input을 하는것이다. 
미리짜여있는 프로그램의 함수들을 수행하는것과 같다. 
이미 짜져있는 프로그램을 순서대로 수행하는것이다. 
순서에 따라 작용하기떄문에 한줄씩줘도 되고 왕창줘도된다. 

인터프린터를 수행시키면 수행상태에서 명령을 주기때문에 기기가 달라져도 같은 수행? os independance 
그것을 java가 이용을했ㄷㅏ. java는 실제로 JVM 위에서 돌아간다. JVM은 인터프리터이다. 
java언어를 이해하는 인터프리터가 아닌 java의 byte코드를 이해함.
자바로짠 프로그램(class)을 바이트 코드로 번역한다. (기계어) 

그림 jVM : jre oracle 자바버추어머신과 환경설정을 합쳐서
jre은 실제로 imb이 만든 jvm이 젤좋다. 돈주고..컴파일할 바이트코드를 어디에나 올려도 다돌아간다. 
여러 app을 돌릴수도있다.
app은 java byte code로 되어있는데. 이것으로 java라는 lang을 바꾼ㄴ것을 자바 컴파일러이다 
jvm은 매우 작다. stack machine 스택기반이다. 
그반대로 세 기계가 나오면 컴파일러를 새로 만들어줘야 한다. 
그리고 그 컴파일러로 번역을 매번..
자바는 그 반대

왜 이런일이 벌어질까? java는 실제 처음에 만들때 home appliance 가전제품에 언어로 쓸려고 했었다. 
어떤 특정 cpu나 기계에 jvm만 만들면 다돌아가게 하고 싶었다. 
실제 industry에서의 의미있음 

------
인터프리터는 프로그램을 수행
cmd의 commandline은 cmdㅇㅔ서 프로그램을 수행시킨것과 같다. 
python은 c로 짜여져있다 

인터프리터 특성
컴파일러는 번역하기 떄문에, path의 개념.앞에 변수를 선언했다. int x=1; x=3; 바꿀수도 있고
x=2.5; 로하면 integer 에러발생시킬수도 있다. 
interpreter는 앞에서 선언하고 뒤에서 선언하고의 개념이 모호하다. 
그래서 변수를 만들었다해도 그 변수가 무슨 타입인지 그게 중요하지 않다. 
컴파일러는 앞에서 선언하지 않은것을 밑에서 쓸수 없다.
뒤에서 선언한 함수를 위에서 쓰고 싶다면 two path complier를 한다. 
인터프리터는 one path만 가능하다. 변수의 타입이 중요하지 않고. 변수 타입에 관한 테이블을 안만든다?
인터프리터는 프로그램이고 컴파일러는 번역기다. 

x=5
x // 여러줄로 할 때 필요가 없음 .
print x 
인터프리터는 한줄로 할 때 사람을 서포트하는 역할 
컴파일러처럼 동작할 떈 

type datamining.py
python datamining.py // 인터프리터와 똑같이 수행이 된다. 

syntax  hightlight // syntax와 키워드가 다나온다 .

constraint 
회사에 들어갔을때 쓰는 software constraint 가 있을 수 있다. 
소프트웨어는 서비스업, 대표적인 서비스업은 술집인데.
같은 위치가 있다는것을 조폭들이 눈치를 채고 조폭들이 소프트웨어하청업체를 차리구 국비지원이랑 역ㄹ
조폭들이 들어올만큼 환경이 열악하다 

파이썬은 인터프리터고 그 개발 환경에 대해서 말을 하였다. 
무조건 부딪히는 것이 파이썬을 가장 잘배우는 방법이다. 

파이썬 준비물 
visual studio, python cheat sheet 

파이썬이라는 언어의 확장된것 처럼보이기. 
numpy을 매트릭스 연산을 해준다 파이썬은 일종의 array를 백터처럼 쓸수있고 백터합, 

프로그램은 위에서 아래로 수행되고 단위는 하나의 단문이다. 
단문이 어떻게 생겼냐
파이썬은 대강의 syntax가 다들어간다. 
흐름의 제어
위에서 아래로.. control structure 
simple statement
https://en.wikibooks.org/wiki/Introduction_to_Python_Programming/Python_Programming_-_Control_Structures

엔터를 두번침 .. 스트럭ㅊ가 끝났따. 
